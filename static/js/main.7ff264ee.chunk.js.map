{"version":3,"sources":["store/LayoutStore.ts","store/ErrorStore.ts","store/store.ts","components/AppBar/AppBar.tsx","components/Category/CategoryButton.tsx","components/Category/Category.tsx","components/Results/input/AnimeSearchInput.tsx","components/Results/CardSmall/CardSmall.tsx","store/types.ts","components/Results/CardSmall/TextBlock.tsx","components/Results/CardSmall/CardSmallContainer.tsx","components/Results/Results.tsx","components/Content/Content.tsx","components/Content/Placeholder.tsx","components/Content/BodyContent.tsx","components/Content/Character/AnimeListFromAnime.tsx","components/Content/ContentContainer.tsx","components/MobPanel.tsx","components/ErrorAlert.tsx","App.tsx","index.tsx","components/Content/Content.module.css"],"names":["activeView","mobPanel","categoryView","makeAutoObservable","this","isOpen","console","log","store","category","errorStatus","errorText","isOpenError","open","text","status","error","toggleAlertError","changeStatusError","response","changeTextError","data","message","textSearch","action","content","topAnime","topCharacter","searchData","favorite","favoriteData","loading","isThrottle","isWaiting","fetching","currentPage","topCharacters","animeCharacters","startProgram","getTopAnime","then","LayoutStore","setCategoriesView","getTopCharacters","locStorage","localStorage","getItem","JSON","parse","fetchingBoolean","select","toJS","pos","findIndex","item","mal_id","isFavorite","splice","unshift","setItem","stringify","a","axios","get","res","setFetching","concat","top","favoriteCheck","catch","finally","forEach","e","map","event","includes","textInput","results","ErrorStore","catchingErrors","setTimeout","ms","startSearch","locStorageData","length","arr","slice","useStyles","makeStyles","theme","wrapper","height","display","background","toolbar","Appbar","classes","AppBar","position","className","color","elevation","Container","Toolbar","Hidden","mdUp","IconButton","onClick","toggleMobPanel","Typography","variant","component","button","width","backgroundColor","buttonActive","CategoryButton","observer","Button","value","setCategory","root","margin","rootRow","container","categories","border","flexDirection","categoriesRow","Category","categoriesButton","el","Paper","ButtonGroup","cursor","input","marginLeft","flex","divider","label","left","fontSize","opacity","iconButton","AnimeSearchInput","useState","setTextInput","validator","startSearchWithDelay","setActiveCategory","onSubmit","preventDefault","InputBase","onChange","target","placeholder","inputProps","aria-label","media","borderRadius","fav","CardSmall","img","textDescription","Card","CardMedia","image","title","Box","AnimeFromCharacterResponseZod","z","object","number","type","literal","name","string","url","MangaFromCharacterResponseZod","image_url","alternative_names","array","anime","manga","synopsis","episodes","score","rank","animeography","characterGuard","undefined","animeGuard","topAnimeGuard","topCharactersGuard","useStyle","textWrapper","justifyContent","overflow","padding","textOverflow","subtitle","onlyTitle","TextBlock","description","gutterBottom","CardContent","CardSmallContainer","style","setContent","toggleActiveView","layoutStore","cardSmall","alignItems","cardsList","flexGrow","cardsListScroll","overflowY","Results","toResultRef","useRef","useEffect","current","scrollTo","cardList","Math","random","ref","onScroll","scrollHeight","scrollTop","window","innerHeight","getBoundingClientRect","Content","favoriteIcon","children","contentWrapper","header","smUp","Fab","fab","setFavorite","headerTitle","maxWidth","Placeholder","BodyContent","preSubtitle","preTitle","alt","src","preSubTitle","subTitle","AnimeListFromAnime","animeList","Link","href","ContentContainer","contentJSX","MobPanel","SwipeableDrawer","anchor","onClose","onOpen","ErrorAlert","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","backdrop","loader","zIndex","App","CssBaseline","Backdrop","CircularProgress","smDown","xsDown","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7ff264ee.chunk.js","sourcesContent":["import { makeAutoObservable, toJS } from \"mobx\";\nimport {CategoriesType, ActiveViewType, CategoriesViewType} from \"./types\";\nimport store from \"./store\";\n\n//todo классы лучше называть с большой буквы\nclass LayoutStore {\n  \n  activeView: ActiveViewType = \"results\";\n  mobPanel = false;\n  //todo здесь тоже, будет CategoriesType\n  categoryView:CategoriesViewType= \"anime\";\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  toggleMobPanel(isOpen: boolean) {\n    this.mobPanel = isOpen;\n    console.log(this.mobPanel)\n  }\n\n  setActiveCategory() {\n    this.categoryView = store.category;\n  }\nsetCategoriesView(category: CategoriesViewType){\n    this.categoryView = category\n}\n  toggleActiveView(activeView: ActiveViewType) {\n    this.activeView = activeView;\n  }\n}\n\nexport default new LayoutStore();\n","import {makeAutoObservable} from \"mobx\";\n\nclass ErrorStore {\n    errorStatus: number = 0\n    errorText: string = ''\n    isOpenError = false\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    toggleAlertError(open: boolean) {\n        this.isOpenError = open\n    }\n\n    changeTextError(text: string) {\n        this.errorText = text\n    }\n\n    changeStatusError(status: number) {\n        this.errorStatus = status\n    }\n\n    catchingErrors(error: any) {\n\n        this.toggleAlertError(true)\n        this.changeStatusError(error.response.status)\n        this.changeTextError(error.response.data.message)\n    }\n}\n\nexport default new ErrorStore()","import React, {useRef} from 'react'\nimport {makeAutoObservable} from \"mobx\";\nimport axios from \"axios\";\nimport {toJS} from \"mobx\";\nimport {animeData} from \"./Category/anime\";\nimport {naruto} from \"./Category/q=Naruto\";\nimport {CardType, CategoriesType, IResponse, IResponseTop} from \"./types\";\nimport LayoutStore from \"./LayoutStore\";\nimport ErrorStore from \"./ErrorStore\";\nimport {string} from \"zod\";\n\n\nclass store {\n\n    textSearch = '';\n    action = \"search\";\n    category: CategoriesType = \"anime\";\n    content: CardType | null = null;\n    data: CardType[] = [];\n    topAnime: CardType[] = [];\n    topCharacter: CardType[] = [];\n    searchData: CardType[] = [];\n    favorite: CardType[] = [];\n    favoriteData: CardType[] = [];\n    loading = false;\n    isThrottle = false;\n    isWaiting = false;\n    fetching = false;\n    currentPage = {\n        topAnime: 1,\n        topCharacters: 1,\n        animeCharacters: 1,\n        // characters: 1,\n        // anime: 1,\n        favorite: 0\n    };\n\n    constructor() {\n        makeAutoObservable(this);\n        this.startProgram();\n        this.getTopAnime().then(() => {\n            //----------------->\n            //this.data = this.topAnime\n            LayoutStore.setCategoriesView(\"topAnime\")\n        })\n\n        this.getTopCharacters()\n\n    }\n\n\n    startProgram() {\n        let locStorage = localStorage.getItem(\"favoriteArr\");\n        if (locStorage !== null) {\n           this.favorite = JSON.parse(locStorage);\n          // this.scrollFavorite(locStorage)\n        }\n        \n    }\n\n    setFetching(fetchingBoolean: boolean) {\n        this.fetching = fetchingBoolean\n    }\n\n\n    setCategory(select: CategoriesType) {\n        this.content = null;\n        this.data = [];\n        this.searchData = []\n        switch (select) {\n            case \"character\":\n                this.data = this.topCharacter\n                //todo сменить top\n                LayoutStore.categoryView = \"topCharacters\";\n                break\n            case \"anime\":\n                this.data = this.topAnime\n                LayoutStore.categoryView = \"topAnime\";\n                break\n            case \"favorite\":\n                this.data = this.favorite;\n                LayoutStore.categoryView = \"favorite\";\n                break\n            default:\n                console.error(select)\n        }\n        this.category = select;\n        console.log(this.category);\n\n    }\n\n    setContent(content: CardType) {\n        this.content = content;\n        console.log(toJS(this.content));\n    }\n\n    setFavorite() {\n        if (this.content === null) return;\n        let pos = this.favorite.findIndex(item => item.mal_id == this.content?.mal_id)\n\n        if (pos !== -1) {\n            this.content.isFavorite = false;\n            this.favorite.splice(pos, 1);\n        } else {\n            this.content.isFavorite = true;\n            this.favorite.unshift(this.content);\n        }\n        localStorage.setItem(`favoriteArr`, JSON.stringify(this.favorite));\n\n    }\n\n    async getTopAnime() {\n        this.loading = true;\n        await axios.get<IResponseTop>(`https://api.jikan.moe/v3/top/anime/${this.currentPage.topAnime}`)\n            .then((res) => {\n                this.setFetching(false)\n                this.topAnime = this.topAnime.concat(res.data.top)\n\n                this.data = this.topAnime\n                this.currentPage.topAnime += 1;\n\n                this.favoriteCheck(this.topAnime)\n\n            })\n            .catch((error) => console.log(error.response))\n            .then(() => {\n                this.loading = false;\n            })\n\n            .finally(\n                () => this.setFetching(false)\n            )\n\n    }\n\n    async getTopCharacters() {\n        this.loading = true;\n        axios.get<IResponseTop>(`https://api.jikan.moe/v3/top/characters/${this.currentPage.topCharacters}`)\n            .then(res => {\n                this.setFetching(false)\n                this.topCharacter = this.topCharacter.concat(res.data.top)\n                if (this.category === \"character\") {\n                    this.data = this.topCharacter\n                    this.currentPage.topCharacters += 1;\n                }\n                this.favoriteCheck(this.topCharacter)\n            })\n            .catch((error) => console.log(error.response))\n            .then(() => {\n                this.loading = false;\n            })\n            .finally(\n                () => this.setFetching(false)\n            )\n\n\n    }\n\n    favoriteCheck(data: CardType[]) {\n        data.forEach((e) => {\n            this.favorite\n                .map((event) => {\n                    return event.mal_id;\n                })\n                .includes(e.mal_id)\n                ? (e.isFavorite = true)\n                : (e.isFavorite = false);\n        });\n    }\n\n    async startSearch(textInput: string) {\n\n        if (this.category === \"favorite\") {\n            return;\n        }\n        this.loading = true;\n        let a =`https://api.jikan.moe/v3/${this.action}/${this.category}?q=${textInput}&limit=10&page=${this.currentPage.animeCharacters}`\n        console.log(a)\n        await axios\n            .get<IResponse>(\n                `https://api.jikan.moe/v3/${this.action}/${this.category}?q=${textInput}&limit=10&page=${this.currentPage.animeCharacters}`\n            )\n            .then((res) => {\n                this.setFetching(false)\n                this.data = []\n                this.searchData = this.searchData.concat(res.data.results);\n                this.data = this.searchData;\n                this.favoriteCheck(this.data)\n                this.currentPage.animeCharacters +=1\n            })\n            .catch((error) => {\n                ErrorStore.catchingErrors(error)\n            })\n            .then(() => {\n                setTimeout(() => {\n                    this.loading = false;\n                }, 500);\n            })\n            .finally(\n                () => this.setFetching(false)\n            );\n    }\n\n\n    startSearchWithDelay(ms: number, textInput: string) {\n        this.textSearch = textInput;\n        if (this.isThrottle) {\n            console.log('тротл')\n            this.isWaiting = true\n            console.log('ждем снятия ограничения')\n            return\n        } else {\n            console.log('startsearch')\n            this.isThrottle = true\n            this.startSearch(textInput)\n\n        }\n        setTimeout(() => {\n            console.log('4сек прошло снимаем ограничение')\n            this.isThrottle = false\n            if (this.isWaiting) {\n                console.log('ограничение снято, запрос отправлен')\n                this.startSearch(textInput)\n            } else {\n                console.log('ограничение снято, запрос не отправлялся')\n                return\n            }\n        }, ms)\n\n        this.isWaiting = false\n    }\n//пока не вызывается, тестим\n    scrollFavorite(locStorageData: any) {\n        this.favoriteData = JSON.parse(locStorageData);\n        console.log(this.currentPage.favorite)\n        if(this.favoriteData.length > this.favorite.length ) {\n            this.setFetching(true)\n            let arr = this.favoriteData.slice(this.currentPage.favorite, this.currentPage.favorite+10)\n            this.setFetching(false)\n            //console.log(toJS(arr))\n            this.favorite = this.favorite.concat(arr);\n            this.data = this.favorite\n            this.currentPage.favorite +=5\n            console.log(toJS(this.favorite))\n            \n        }\n    }\n\n}\n\nexport default new store();\n","import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Container,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport LayoutStore from \"../../store/LayoutStore\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    height: \"64px\",\n    display: \"flex\",\n    background: \"rgba(130, 188, 255, 1)\",\n  },\n  toolbar: {},\n}));\n\nexport const Appbar = () => {\n  const classes = useStyles();\n  return (\n    <AppBar\n      position={\"static\"}\n      className={classes.wrapper}\n      color={\"transparent\"}\n      elevation={0}\n    >\n      <Container>\n        <Toolbar className={classes.toolbar}>\n          <Hidden mdUp>\n            <IconButton\n              onClick={() => {\n                LayoutStore.toggleMobPanel(true);\n              }}\n            >\n              <MenuIcon />\n            </IconButton>\n          </Hidden>\n          <Typography variant=\"h5\" component=\"h2\" >\n            SuperDuperAnime\n          </Typography>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n};\n","import React from \"react\";\nimport store from \"../../store/store\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { CategoriesType } from \"../../store/types\";\nimport { observer } from \"mobx-react-lite\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(0, 0, 0, .35)\",\n    },\n  },\n  buttonActive: {\n    backgroundColor: \"rgba(0, 0, 0, .35)\",\n  },\n}));\nexport const CategoryButton = observer(({ data }: CategoryButtonProp) => {\n  const classes = useStyles();\n  return (\n    <Button\n      variant=\"outlined\"\n      className={`${classes.button} ${\n        store.category === data.value ? classes.buttonActive : null\n      }`}\n      onClick={(e) => {\n        store.setCategory(data.value);\n      }}\n    >\n      {data.text}\n    </Button>\n  );\n});\n\ninterface CategoryButtonProp {\n  data: {\n    value: CategoriesType;\n    text: string;\n  };\n}\n","import React from \"react\";\nimport store from \"../../store/store\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button, ButtonGroup, makeStyles, Paper } from \"@material-ui/core\";\nimport { CategoriesType } from \"../../store/types\";\nimport { CategoryButton } from \"./CategoryButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"150px\",\n    margin: 8,\n    background: \"linear-gradient(246.82deg, #FFCADC 0%, #C8FFFD 58.33%)\",\n    height: \"calc(100vh - 96px)\",\n  },\n  rootRow: {\n    width: 280,\n  },\n  container: {\n    display: \"flex\",\n  },\n  categories: {\n    display: \"flex\",\n    height: \"100%\",\n    width: \"100%\",\n    border: \"none\",\n    flexDirection: \"column\",\n  },\n  categoriesRow: {\n    flexDirection: \"row\",\n  },\n}));\nexport const categories: { value: CategoriesType; text: string }[] = [\n  { value: \"favorite\", text: \"Favorite\" },\n  { value: \"anime\", text: \"Anime\" },\n  { value: \"character\", text: \"Characters\" },\n];\nexport const Category = observer(() => {\n  const classes = useStyles();\n  const categoriesButton = categories.map((el) => {\n    return <CategoryButton key={el.value} data={el} />;\n  });\n  return (\n    <Paper className={classes.root}>\n      <ButtonGroup className={classes.categories}>\n        {categoriesButton}\n      </ButtonGroup>\n    </Paper>\n  );\n});\n","import React, {useState} from \"react\";\nimport {makeStyles, Theme, createStyles} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport store from \"../../../store/store\";\nimport {observer} from \"mobx-react-lite\";\nimport {animeData} from \"../../../store/Category/anime\";\nimport {naruto} from \"../../../store/Category/q=Naruto\";\nimport LayoutStore from \"../../../store/LayoutStore\";\nimport {Box, CircularProgress, Snackbar, Typography} from \"@material-ui/core\";\nimport {categories} from \"../../Category/Category\";\nimport {Alert} from \"@material-ui/lab\";\nimport ErrorStore from \"../../../store/ErrorStore\";\n\n\nconst useStyles = makeStyles({\n    root: {\n        display: \"flex\",\n        position: \"relative\",\n        width: 244,\n        height: 64,\n        cursor: \"pointer\",\n        margin: \"8px auto\",\n    },\n    input: {\n        marginLeft: 2,\n        flex: 1,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n    label: {\n        position: \"absolute\",\n        top: 2,\n        left: 8,\n        fontSize: 10,\n        opacity: 0.7,\n    },\n\n    iconButton: {},\n});\n\nexport const AnimeSearchInput = observer(() => {\n    const classes = useStyles();\n    const [textInput, setTextInput] = useState('')\n    const validator = () => {\nif(textInput.length<=3){\n    ErrorStore.changeTextError('Введите больше 3 букв')\n    ErrorStore.toggleAlertError(true)\n    return\n} else {\n    store.startSearchWithDelay(4000, textInput)\n    LayoutStore.setActiveCategory();\n}\n    }\n    return (\n        <Paper\n            component=\"form\"\n            onSubmit={(e) => {\n                e.preventDefault();\n                validator()\n            }}\n            className={classes.root}>\n            <Typography className={classes.label}>\n                {categories.map((el) => (el.value === store.category ? el.text : null))}\n            </Typography>\n            <InputBase\n                value={textInput}\n                onChange={(e) => {\n                    setTextInput(e.target.value)\n                }}\n                className={classes.input}\n                //todo а если не аниме?\n                placeholder=\"Start searching Anime\"\n                inputProps={{\"aria-label\": \"search Anime\"}}\n            />\n\n            <IconButton\n                className={classes.iconButton}\n                aria-label=\"search\"\n                onClick={validator}\n            >\n                <SearchIcon/>\n            </IconButton>\n        </Paper>\n    );\n});\n","import React, {ReactNode} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Grid, Fab, Box} from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {observer} from \"mobx-react-lite\";\nimport store from \"../../../store/store\";\nimport LayoutStore from \"../../../store/LayoutStore\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport {CardType} from \"../../../store/types\";\n\nconst useStyles = makeStyles({\n    root: {\n        display: \"flex\",\n        position: \"relative\",\n        width: 244,\n        background: \"rgba(255,255,255,0.5)\",\n        // minWidth: 250,\n        height: 64,\n        cursor: \"pointer\",\n        margin: \"8px auto\",\n    },\n    media: {\n        border: \"1px solid rgba(255,255,255,0.8)\",\n        width: 56,\n        height: 56,\n        borderRadius: \"100%\",\n        margin: 4,\n    },\n\n\n    fav: {\n        width: 56,\n        height: 56,\n    },\n\n});\n\ninterface ICardSmall {\n    textDescription: ReactNode\n    img: string\n    favorite: JSX.Element | null\n\n    onClick: ()=>void\n}\n\nexport const CardSmall = observer(\n    ({\n         img,  favorite, textDescription, onClick\n     }: ICardSmall) => {\n        const classes = useStyles();\n\n\n        return (\n            <Card\n                className={classes.root}\n                onClick={onClick}\n            >\n                <CardMedia\n                    className={classes.media}\n                    image={img}\n                    title=\"Contemplative Reptile\"\n                />\n                {textDescription}\n                <Box className={classes.fav}>{favorite}</Box>\n            </Card>\n        );\n    }\n);\n","import {z} from \"zod\";\n\nexport type CategoriesType = \"anime\" | \"character\" | \"favorite\"\nexport type ActiveViewType = 'results' | 'content'\nexport type CategoriesViewType = CategoriesType | 'topAnime' | 'topCharacters'\n\nexport  type CardType = (CharacterType | AnimeType | TopAnimeType| TopCharactersType) & IIsFavorite\nexport type CardType1 = {\n    mal_id: number,\n    title: string,\n    description: string,\n    image_url: string,\n    isFavorite: boolean,\n    category: CategoriesViewType\n}\n\nexport interface IIsFavorite {\n    isFavorite?: boolean;\n}\n\nexport interface IResponse {\n    request_hash: string;\n    request_cached: boolean;\n    request_cache_expiry: number;\n    results: CardType[];\n}\n\nexport interface IResponseTop {\n    request_hash: string,\n    request_cached: boolean,\n    request_cache_expiry: number,\n    top: TopAnimeType[]|TopCharactersType[]\n}\n\n\n const AnimeFromCharacterResponseZod = z.object({\n    mal_id: z.number(),\n    type: z.literal('anime'),\n    name: z.string(),\n    url: z.string(),\n})\nexport type  AnimeFromCharacterResponseType = z.infer<typeof AnimeFromCharacterResponseZod>\n\n\nconst MangaFromCharacterResponseZod = z.object({\n    mal_id: z.number(),\n    type: z.literal('manga'),\n    name: z.string(),\n    url: z.string(),\n})\ntype MangaFromCharacterResponseType = z.infer<typeof MangaFromCharacterResponseZod>\n\n\nconst CharacterZod = z.object({\n    mal_id: z.number(),\n    url: z.string(),\n    image_url: z.string(),\n    name: z.string(),\n    alternative_names: z.string().array(),\n    anime: z.array(AnimeFromCharacterResponseZod),\n    manga: z.array(MangaFromCharacterResponseZod),\n})\n\nconst AnimeZod = z.object({\n    mal_id: z.number(),\n    url: z.string(),\n    image_url: z.string(),\n    title: z.string(),\n    synopsis: z.string(),\n})\n\nconst TopAnimeZod = z.object({\n    mal_id: z.number(),\n    episodes: z.number(),\n    score: z.number(),\n    title: z.string(),\n    rank: z.number(),\n    url: z.string(),\n    image_url: z.string(),\n})\nconst TopCharactersZod = z.object({\n    mal_id: z.number(),\n    animeography: z.array(AnimeFromCharacterResponseZod),\n    title: z.string(),\n    rank: z.number(),\n    url: z.string(),\n    image_url: z.string(),\n})\n\nexport  type CharacterType = z.infer<typeof CharacterZod>\nexport  type AnimeType = z.infer<typeof AnimeZod>\nexport type TopAnimeType = z.infer<typeof TopAnimeZod>\nexport type TopCharactersType = z.infer<typeof TopCharactersZod>\n\nexport function characterGuard(data: CardType): data is CharacterType{\n    return (data as CharacterType).alternative_names !== undefined\n}\nexport function animeGuard(data: CardType): data is AnimeType{\n    return (data as AnimeType).synopsis !== undefined\n}\nexport function topAnimeGuard(data: CardType): data is TopAnimeType{\n    return (data as TopAnimeType).score!== undefined\n}\nexport function topCharactersGuard(data: CardType): data is TopCharactersType{\n    return (data as TopCharactersType).animeography!== undefined\n}\n","import React, {ReactNode} from 'react';\nimport {CardContentTypeMap, makeStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport {OverridableComponent} from \"@material-ui/core/OverridableComponent\";\nimport {CategoriesType, CategoriesViewType} from \"../../../store/types\";\n\ninterface TextBlockProp {\n    category: CategoriesViewType\n    title?: string\n    description?: string\n}\n\nconst useStyle = makeStyles({\n    textWrapper: {\n        width: 144,\n        height: 64,\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-evenly\",\n        overflow: \"hidden\",\n        padding: 0,\n    },\n    title: {\n        width: 144,\n        height: 28,\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        padding: \"0 4px\",\n    },\n    subtitle: {\n        width: 144,\n        height: 36,\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        padding: \"0 4px\",\n    },\n    onlyTitle: {\n        width: 164,\n        height: 64,\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        padding: \"0 4px\",\n    },\n})\nexport const TextBlock = ({category, title,description}: TextBlockProp) => {\n    const classes = useStyle()\n\n    const textDescription = category === \"anime\" ? (\n            <>\n                <Typography\n                    gutterBottom\n                    variant=\"button\"\n                    component=\"h2\"\n                    className={classes.title}\n                >\n                    {title}\n                </Typography>\n                <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                    className={classes.subtitle}\n                >\n                    {description}\n                </Typography>\n            </>\n        ) : (\n            <Typography\n                gutterBottom\n                variant=\"h5\"\n                component=\"h2\"\n                className={classes.onlyTitle}\n            >\n                {title}\n            </Typography>\n        );\n    const t = <CardContent/>\n    return (<CardContent className={classes.textWrapper}>{textDescription}</CardContent>\n\n\n    );\n}\n;\n\n","import React from 'react';\nimport {CardSmall} from \"./CardSmall\";\nimport {animeGuard, CardType, characterGuard, topAnimeGuard, topCharactersGuard} from \"../../../store/types\";\nimport {TextBlock} from \"./TextBlock\";\nimport layoutStore from \"../../../store/LayoutStore\";\nimport store from \"../../../store/store\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport LayoutStore from \"../../../store/LayoutStore\";\nimport {observer} from \"mobx-react-lite\";\n\n\ninterface CardSmallContainerProp {\n    data: CardType\n\n}\n\nfunction TextDescription() {\n    return null;\n}\n\n// export const CardSmallContainer = ({data}: CardSmallContainerProp) => {\n//     const title = data.title || data.name\n//     const img = data.image_url\n//     const favorite = store.category !== \"favorite\" && data.isFavorite ? <FavoriteIcon style={{fontSize: 54}}/> : null\n//     const textDescription = <TextBlock description={data.synopsis} category={layoutStore.categoryView} title={title}/>\n//     const onClick = () => {\n//         store.setContent(data);\n//         LayoutStore.toggleActiveView(\"content\");\n//     }\n//     return (\n//         <CardSmall key={data.mal_id} textDescription={textDescription} img={img} favorite={favorite} onClick={onClick}/>\n//     );\n// };\nexport const CardSmallContainer = observer(({data}: CardSmallContainerProp) => {\n\n        const img = data.image_url\n        const favorite = store.category !== \"favorite\" && data.isFavorite ? <FavoriteIcon style={{fontSize: 54}}/> : null\n        const onClick = () => {\n            store.setContent(data);\n            LayoutStore.toggleActiveView(\"content\");\n        }\n\n        const cardSmall = () => {\n            if (animeGuard(data)) {\n                const title = data.title\n                const textDescription = <TextBlock description={data.synopsis} category={layoutStore.categoryView} title={title}/>\n                return <CardSmall key={data.mal_id} textDescription={textDescription} img={img} favorite={favorite}\n                                  onClick={onClick}/>\n            } else if (characterGuard(data)) {\n                const title = data.name\n                const textDescription = <TextBlock description={undefined} category={layoutStore.categoryView} title={title}/>\n                return <CardSmall key={data.mal_id} textDescription={textDescription} img={img} favorite={favorite}\n                                  onClick={onClick}/>\n            } else if (topAnimeGuard(data)) {\n                const title = data.title\n                const textDescription = <TextBlock description={undefined} category={layoutStore.categoryView} title={title}/>\n                return <CardSmall key={data.mal_id} textDescription={textDescription} img={img} favorite={favorite}\n                                  onClick={onClick}/>\n            } else if (topCharactersGuard(data)){\n                const title = data.title\n                const textDescription = <TextBlock description={undefined} category={layoutStore.categoryView} title={title}/>\n                return <CardSmall key={data.mal_id} textDescription={textDescription} img={img} favorite={favorite}\n                                  onClick={onClick}/>\n            } else {\n                let unrealType: never = data\n            }\n        }\n\nreturn <>\n    {cardSmall()}\n</>\n    }\n)\n\n","import React, {ReactHTML, ReactHTMLElement, useEffect, useRef, useState}from \"react\";\nimport store from \"../../store/store\";\nimport {observer} from \"mobx-react-lite\";\nimport {\n    IconButton,\n    Input,\n    makeStyles,\n    Paper,\n    Box,\n    CircularProgress,\n    BoxProps,\n} from \"@material-ui/core\";\nimport {CardSmall} from \"./CardSmall/CardSmall\";\nimport {AnimeSearchInput} from \"./input/AnimeSearchInput\";\nimport LayoutStore from \"../../store/LayoutStore\";\nimport {categories} from \"../Category/Category\";\nimport {CardSmallContainer} from \"./CardSmall/CardSmallContainer\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"280px\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: 8,\n        height: \"calc(100vh - 64px - 32px)\",\n        background: \"linear-gradient(113.18deg, #FFCADC 0%, #C8FFFD 58.33%)\",\n    },\n    cardsList: {\n        position: \"relative\",\n        flexGrow: 1,\n        width: \"260px\",\n    },\n    cardsListScroll: {\n        position: \"absolute\",\n        height: \"calc(100vh - 64px - 128px)\",\n        width: \"260px\",\n        overflowY: \"auto\",\n    },\n}));\n\nexport const Results = observer(() => {\n    const classes = useStyles();\n\n    const toResultRef = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n        toResultRef.current?.scrollTo(0, 0)\n    }, [LayoutStore.categoryView])\n\n    function scrollResult(e: any) {\n        if (e.target.scrollHeight - (e.target.scrollTop + (window.innerHeight-e.target.getBoundingClientRect().top)) < 100) {\n            store.setFetching(true)\n            \n        }\n    }\n    useEffect( () => {\n        console.log('Store Fetching',store.fetching)\n        if (store.fetching) {\n            console.log(LayoutStore.categoryView)\n            switch(LayoutStore.categoryView) {\n                case \"topAnime\" : store.getTopAnime()\n                break;\n                case \"topCharacters\" : store.getTopCharacters()\n                break;\n                case 'character':\n                case 'anime'  : store.startSearchWithDelay(4000, store.textSearch)\n                break;\n                // case 'favorite' : store.scrollFavorite(localStorage.getItem(\"favoriteArr\"))\n                // break;\n                default:\n                    store.setFetching(false)\n            }\n            \n            \n        }\n      }, [store.fetching])\n    \n    //todo если нет поиска, то надо показывать всё подряд\n    const cardList =\n        store.data === null ? (\n            <div>Введите данные</div>\n        ) : (\n            store.data.map(el => {\n                return (\n                    <CardSmallContainer key={`${el.mal_id}${Math.random()}`} data={el}/>\n                );\n            })\n        );\n\n    return (\n        <Paper className={classes.root}>\n            <Box className={classes.cardsList}>\n                <AnimeSearchInput/>\n\n                <Box>\n                    {LayoutStore.categoryView}\n                </Box>\n                \n                <div ref = {toResultRef} onScroll = {scrollResult} className={classes.cardsListScroll}>{cardList}</div>\n            </Box>\n        </Paper>\n    );\n});\n","import React, {ReactElement} from \"react\";\nimport {\n    Card,\n    Fab,\n    makeStyles,\n    Grid,\n    Box,\n    colors,\n    Paper, SvgIconTypeMap,\n} from \"@material-ui/core\";\nimport { observer } from \"mobx-react-lite\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Hidden} from \"@material-ui/core\";\nimport store from \"../../store/store\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport LayoutStore from \"../../store/LayoutStore\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport { CategoriesType } from \"../../store/types\";\nimport classes from \"./Content.module.css\";\nimport {OverridableComponent} from \"@material-ui/core/OverridableComponent\";\n\n// interface IContent {\n//   title?: string;\n//   prefixTitle: string;\n//   subtitle?: string | string[];\n//   prefixSubtitle: string;\n//   favoriteIcon: JSX.Element;\n//   img?: string;\n// }\n\n// export const Content = observer(\n//     ({\n//          title,\n//          prefixTitle,\n//          subtitle,\n//          prefixSubtitle,\n//          favoriteIcon,\n//          img,\n//      }: IContent) => {\n//\n//         return (\n//             <Paper className={classes.root}>\n//                 <Box className={classes.contentWrapper}>\n//                     <Paper className={classes.header}>\n//                         <Hidden mdUp smUp>\n//                             <Fab\n//                                 className={classes.fab}\n//                                 color=\"primary\"\n//                                 onClick={() => {\n//                                     LayoutStore.toggleActiveView(\"results\");\n//                                 }}\n//                             >\n//                                 <ArrowBackIcon />\n//                             </Fab>\n//                         </Hidden>\n//                         <Fab className={classes.fab} onClick={() => store.setFavorite()}>\n//                             {favoriteIcon}\n//                         </Fab>\n//\n//                         <Typography\n//                             className={classes.title}\n//                             variant={\"h4\"}\n//                             component={\"h2\"}\n//                         >\n//                             {title}\n//                         </Typography>\n//                     </Paper>\n//                     <Typography\n//                         className={classes.subtitle}\n//                         variant={\"body1\"}\n//                         component={\"p\"}\n//                     >\n//                         <img className={classes.img} alt={\"#\"} src={img} />\n//                         {prefixTitle}: {title} <br />\n//                         {prefixSubtitle}: {subtitle}\n//                     </Typography>\n//                 </Box>\n//             </Paper>\n//         );\n//     }\n// );\ninterface IContent {\n    title: string;\n    favoriteIcon:  JSX.Element;\n    children: JSX.Element\n}\n\nexport const Content = observer(\n    ({\n         title,\n        favoriteIcon,\n         children\n     }: IContent) => {\n\n        return (\n            <Paper className={classes.root}>\n                <Box className={classes.contentWrapper}>\n                    <Paper className={classes.header}>\n                        <Hidden  smUp>\n                            <Fab\n                                className={classes.fab}\n                                color=\"primary\"\n                                onClick={() => {\n                                    LayoutStore.toggleActiveView(\"results\");\n                                }}\n                            >\n                                <ArrowBackIcon />\n                            </Fab>\n                        </Hidden>\n                        <Fab className={classes.fab} onClick={() => store.setFavorite()}>\n                            {favoriteIcon}\n                        </Fab>\n\n                        <Typography\n                            className={classes.headerTitle}\n                            variant={\"h5\"}\n                            component={'h3'}\n                        >\n                            {title}\n                        </Typography>\n                    </Paper>\n                    {children}\n                </Box>\n            </Paper>\n        );\n    }\n);","import React from \"react\";\nimport { Box, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    height: \"calc(100% - 32px)\",\n    margin: 8,\n    background: \"linear-gradient(113.18deg, #FFD3E2 0%, #6FFFF9 100%)\",\n  },\n}));\n\nexport const Placeholder = () => {\n  const classes = useStyles();\n  return <Box className={classes.root}></Box>;\n};\n","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport classes from \"./Content.module.css\";\nimport {AnimeFromCharacterResponseType} from \"../../store/types\";\nimport {AnimeListFromAnimeProp} from \"./Character/AnimeListFromAnime\";\n\ninterface BodyContentProp {\n    img: string\n    preTitle: string\n    title: string\n    preSubtitle: string\n    subtitle?: string | number | JSX.Element\n}\n\nexport const BodyContent = ({img, title, subtitle, preSubtitle, preTitle}: BodyContentProp) => {\n    return (\n        <Typography\n            className={classes.subtitle}\n            variant={\"body1\"}\n            component={\"p\"}\n        >\n            <img className={classes.img} alt={\"#\"} src={img}/>\n            <Typography variant={'h6'} className={classes.preTitle}>{preTitle}</Typography><Typography className={classes.title} variant={'h4'}> {title}</Typography>\n            <br/>\n            <Typography variant={'h4' } className={classes.preSubTitle}> {preSubtitle}</Typography><Typography className={classes.subTitle} variant={'h4'}>  {subtitle}</Typography>\n        </Typography>\n    );\n};\n","import React from 'react';\nimport {AnimeFromCharacterResponseType} from \"../../../store/types\";\nimport {Box, Link} from \"@material-ui/core\";\n\nexport interface AnimeListFromAnimeProp {\n    animeList:  AnimeFromCharacterResponseType[]\n}\nexport const AnimeListFromAnime = ({animeList}:AnimeListFromAnimeProp) => {\n    return (\n        <Box>\n            {animeList.map(el=> <Box>{el.name} <Link href={el.url} color={'primary'}>ccskrf</Link></Box> )}\n\n        </Box>\n    );\n};\n","import React from \"react\";\nimport {Content} from \"./Content\";\nimport store from \"../../store/store\";\nimport {observer} from \"mobx-react-lite\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport {SmsFailedOutlined} from \"@material-ui/icons\";\nimport {Box} from \"@material-ui/core\";\nimport {Placeholder} from \"./Placeholder\";\nimport {CharacterType, CardType, AnimeType, IIsFavorite, animeGuard, characterGuard, topAnimeGuard, topCharactersGuard} from \"../../store/types\";\nimport {BodyContent} from \"./BodyContent\";\nimport {AnimeListFromAnime} from \"./Character/AnimeListFromAnime\";\n\nexport const ContentContainer = observer(() => {\n        const content = store.content\n        let contentJSX = () => {\n            if (content) {\n                const img = content.image_url\n                const favoriteIcon = content.isFavorite ? <FavoriteIcon/> : <FavoriteBorderIcon/>;\n\n                if (animeGuard(content)) {\n                    return <Content\n                        title={content.title}\n                        favoriteIcon={favoriteIcon}\n                    >\n                        <BodyContent img={img} preTitle={'Title: '} title={content.title} preSubtitle={'Synopsis: '}\n                                     subtitle={content.synopsis}/>\n                    </Content>\n                } else if (characterGuard(content)) {\n                    const animeList =<AnimeListFromAnime animeList={content.anime}/>\n                    return <Content\n                        title={content.name}\n                        favoriteIcon={favoriteIcon}\n                    >\n                        <BodyContent img={img} preTitle={'Name: '} title={content.name}\n                                     preSubtitle={'This character from: '}\n                                     subtitle= {animeList}/>\n                    </Content>\n                } else if (topAnimeGuard(content)) {\n                    return <Content\n                        title={content.title}\n                        favoriteIcon={favoriteIcon}\n                    >\n                        <BodyContent preTitle={'Title: '} title={content.title} preSubtitle={'RANK: '}\n                                     subtitle={content.rank} img={img}/>\n                    </Content>\n                } else if(topCharactersGuard(content)){\n                    return <Content\n                        title={content.title}\n                        favoriteIcon={favoriteIcon}\n                    >\n                        <BodyContent preTitle={'Title: '} title={content.title} preSubtitle={'RANK: '}\n                                     subtitle={content.rank} img={img}/>\n                    </Content>\n                } else {\n                    let unrealType: never = content\n                }\n            } else {\n                return <Placeholder/>\n            }\n        }\n\n        return <>\n            {contentJSX()}\n        </>\n    }\n);\n","import React from \"react\";\nimport { Box, Hidden, makeStyles, SwipeableDrawer } from \"@material-ui/core\";\nimport LayoutStore from \"../store/LayoutStore\";\nimport { observer } from \"mobx-react-lite\";\nimport { Category } from \"./Category/Category\";\nimport { Results } from \"./Results/Results\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"fit-content\",\n  },\n  container: {\n    background: \"rgba(65, 94, 127, 1)\",\n    padding: \"60px 8px\",\n    height: \"100vh\",\n    display: \"flex\",\n    alignItems: \"stretch\",\n  },\n}));\n\nexport const MobPanel = observer(() => {\n  const classes = useStyles();\n  return (\n    <SwipeableDrawer\n      anchor={\"left\"}\n      open={LayoutStore.mobPanel}\n      onClose={() => {\n        LayoutStore.toggleMobPanel(false);\n      }}\n      onOpen={() => {\n        LayoutStore.toggleMobPanel(true);\n      }}\n      className={classes.root}\n    >\n      <Box className={classes.container}>\n        <Hidden mdUp>\n          <Category />\n        </Hidden>\n      </Box>\n    </SwipeableDrawer>\n  );\n});\n","import React from 'react';\nimport {makeStyles, Snackbar} from \"@material-ui/core\";\nimport store from \"../store/store\";\nimport {Alert} from \"@material-ui/lab\";\nimport ErrorStore from \"../store/ErrorStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {toJS} from \"mobx\";\n\ninterface ErrorAlertProp {\n    children?: React.ReactNode\n}\n\nconst useStyle = makeStyles({\n    root: {},\n})\nexport const ErrorAlert = observer(({children}: ErrorAlertProp) => {\n    const classes = useStyle()\n    console.log(toJS(ErrorStore.errorText))\n    return (\n        <Snackbar\n            anchorOrigin={{vertical: 'top', horizontal: 'center'}}\n            open={ErrorStore.isOpenError} autoHideDuration={6000} onClose={() => {\n            ErrorStore.isOpenError = false\n        }}>\n            <Alert severity=\"error\">\n                {ErrorStore.errorText}\n            </Alert>\n        </Snackbar>\n    );\n})\n","import React, { useEffect, useState } from \"react\";\nimport store from \"./store/store\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Container,\n  CssBaseline,\n  makeStyles,\n  Grid,\n  colors,\n  Hidden,\n  CircularProgress,\n  Backdrop, Snackbar\n} from \"@material-ui/core\";\nimport { Appbar } from \"./components/AppBar/AppBar\";\nimport LayoutStore from \"./store/LayoutStore\";\nimport { Results } from \"./components/Results/Results\";\nimport { Content } from \"./components/Content/Content\";\nimport { Category } from \"./components/Category/Category\";\nimport { ContentContainer } from \"./components/Content/ContentContainer\";\nimport { MobPanel } from \"./components/MobPanel\";\nimport {Alert} from \"@material-ui/lab\";\nimport {ErrorAlert} from \"./components/ErrorAlert\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    position: \"relative\",\n    width: \"100vw\",\n    height: \"100vh\",\n    background: \"linear-gradient(315deg, #FFDEE9 0%, #B5FFFC 100%)\",\n    flexDirection: \"column\"\n  },\n  container: {\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n\n  button: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\"\n  },\n  contentWrapper: {\n    position: \"relative\",\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    background: \"transparent\"\n  },\n  backdrop: {\n    color: \"rgba(0,0,0,0.3)\"\n  },\n  loader: {\n    position: \"fixed\",\n    zIndex: 999,\n    top: \"50%\",\n    left: \"50%\"\n  }\n});\nconst App = observer(() => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Appbar />\n      {store.loading ? (\n        <Box className={classes.loader}>\n          <Backdrop className={classes.backdrop} open={true}>\n            <CircularProgress />\n          </Backdrop>{\" \"}\n        </Box>\n      ) : null}\n      <Hidden mdUp>\n        <MobPanel />\n      </Hidden>\n      <Container maxWidth=\"lg\" className={classes.container}>\n        <Hidden smDown>\n          <Category />\n        </Hidden>\n        <Hidden xsDown>\n          <Results />\n        </Hidden>\n        <Hidden smUp>\n          <Box className={classes.contentWrapper}>\n            {LayoutStore.activeView === \"content\" ? (\n              <ContentContainer />\n            ) : (\n              <Results />\n            )}\n          </Box>\n        </Hidden>\n        <Hidden xsDown>\n          <Box className={classes.contentWrapper}>\n            <ContentContainer />\n          </Box>\n        </Hidden>\n      </Container>\n     <ErrorAlert/>\n    </div>\n  );\n});\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Content_root__2QAnb\",\"contentWrapper\":\"Content_contentWrapper__1_Z_u\",\"header\":\"Content_header__TjYHc\",\"headerTitle\":\"Content_headerTitle__31VRS\",\"img\":\"Content_img__2YsyD\",\"fab\":\"Content_fab__wbXtp\",\"preTitle\":\"Content_preTitle__2LKov\",\"title\":\"Content_title__2SIw7\",\"preSubTitle\":\"Content_preSubTitle__mMOUj\",\"subTitle\":\"Content_subTitle__3RIp9\"};"],"sourceRoot":""}